{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/mitulshah/Desktop/Next/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useReducer } from 'react';\nimport { Card, Input } from 'antd';\nimport Link from 'next/link';\nimport { useEffect } from 'react';\nimport { getMovies } from '../actions';\nimport { initialState, reducer } from '../reducer';\nimport { GET_MOVIE_REQUEST, GET_MOVIE, GET_MOVIE_FAILURE } from '../constant';\nexport default function Index() {\n  var _this = this;\n\n  var _useState = useState('spiderman'),\n      movie = _useState[0],\n      setMovie = _useState[1];\n\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var Meta = Card.Meta;\n  var Search = Input.Search;\n\n  function getMoviesData() {\n    var response;\n    return _regeneratorRuntime.async(function getMoviesData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: GET_MOVIE_REQUEST\n            });\n            _context.prev = 1;\n            _context.t0 = _regeneratorRuntime;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(getMovies({\n              movie: movie\n            }));\n\n          case 5:\n            _context.t1 = _context.sent.json();\n            _context.next = 8;\n            return _context.t0.awrap.call(_context.t0, _context.t1);\n\n          case 8:\n            response = _context.sent;\n            dispatch({\n              type: GET_MOVIE,\n              payload: response\n            });\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t2 = _context[\"catch\"](1);\n            dispatch({\n              type: GET_MOVIE_FAILURE\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 12]], Promise);\n  }\n\n  useEffect(function () {\n    getMoviesData();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Search, {\n    placeholder: \"input search text\",\n    onSearch: function onSearch(value) {\n      return console.log(value);\n    },\n    enterButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }), state.loading ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Loading\") : __jsx(React.Fragment, null, state.data.length > 0 ? state.data.map(function (item, index) {\n    return __jsx(Link, {\n      key: index,\n      href: \"/moviedetail\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 29\n      }\n    }, __jsx(Card, {\n      style: {\n        width: 300\n      },\n      cover: __jsx(\"img\", {\n        style: {\n          width: '100%'\n        },\n        alt: item.Title,\n        src: item.Poster !== 'N/A' ? item.Poster : 'https://cdn.cwsplatform.com/assets/no-photo-available.png',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 41\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 33\n      }\n    }, __jsx(Meta, {\n      title: item.Title,\n      description: \"The Movie \".concat(item.Title, \" was release on \").concat(item.Year),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 37\n      }\n    })));\n  }) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, \"No data found\")));\n}","map":{"version":3,"sources":["/Users/mitulshah/Desktop/Next/pages/index.js"],"names":["React","useState","useReducer","Card","Input","Link","useEffect","getMovies","initialState","reducer","GET_MOVIE_REQUEST","GET_MOVIE","GET_MOVIE_FAILURE","Index","movie","setMovie","state","dispatch","Meta","Search","getMoviesData","type","json","response","payload","value","console","log","loading","data","length","map","item","index","width","Title","Poster","Year"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport { Card, Input } from 'antd';\nimport Link from 'next/link';\nimport { useEffect } from 'react';\nimport { getMovies } from '../actions';\nimport { initialState, reducer } from '../reducer';\nimport { GET_MOVIE_REQUEST, GET_MOVIE, GET_MOVIE_FAILURE } from '../constant';\n\nexport default function Index() {\n    const [movie, setMovie] = useState('spiderman');\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const { Meta } = Card;\n    const { Search } = Input;\n\n    async function getMoviesData() {\n        dispatch({\n            type: GET_MOVIE_REQUEST,\n        });\n        try {\n            const response = await (await getMovies({ movie })).json();\n            dispatch({\n                type: GET_MOVIE,\n                payload: response,\n            });\n        } catch (error) {\n            dispatch({\n                type: GET_MOVIE_FAILURE,\n            });\n        }\n    }\n\n    useEffect(() => {\n        getMoviesData();\n    }, []);\n    return (\n        <>\n         <Search placeholder=\"input search text\" onSearch={value => console.log(value)} enterButton />\n            {state.loading ? (\n                <div>Loading</div>\n            ) : (\n                <>\n                    {state.data.length > 0 ? (\n                        state.data.map((item, index) => (\n                            <Link key={index} href=\"/moviedetail\">\n                                <Card\n                                    style={{ width: 300 }}\n                                    cover={\n                                        <img\n                                            style={{ width: '100%' }}\n                                            alt={item.Title}\n                                            src={\n                                                item.Poster !== 'N/A'\n                                                    ? item.Poster\n                                                    : 'https://cdn.cwsplatform.com/assets/no-photo-available.png'\n                                            }\n                                        />\n                                    }\n                                >\n                                    <Meta\n                                        title={item.Title}\n                                        description={`The Movie ${item.Title} was release on ${item.Year}`}\n                                    />\n                                </Card>\n                            </Link>\n                        ))\n                    ) : (\n                        <div>No data found</div>\n                    )}\n                </>\n            )}\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}