{"ast":null,"code":"var _jsxFileName = \"/Users/mitulshah/Desktop/Next/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useReducer } from 'react';\nimport { Card, Input } from 'antd';\nimport Link from 'next/link';\nimport { useEffect } from 'react';\nimport { getMovies } from '../actions';\nimport { initialState, reducer } from '../reducer';\nimport { GET_MOVIE_REQUEST, GET_MOVIE, GET_MOVIE_FAILURE } from '../constant';\nexport default function Index() {\n  const {\n    0: movie,\n    1: setMovie\n  } = useState('spiderman');\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const {\n    Meta\n  } = Card;\n  const {\n    Search\n  } = Input;\n\n  async function getMoviesData() {\n    dispatch({\n      type: GET_MOVIE_REQUEST\n    });\n\n    try {\n      const response = await (await getMovies({\n        movie\n      })).json();\n      dispatch({\n        type: GET_MOVIE,\n        payload: response\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_MOVIE_FAILURE\n      });\n    }\n  }\n\n  useEffect(() => {\n    getMoviesData();\n  }, [movie]);\n  return __jsx(React.Fragment, null, __jsx(Search, {\n    placeholder: \"input search text\",\n    onSearch: value => setMovie(value),\n    enterButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), state.loading ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, \"Loading\") : __jsx(React.Fragment, null, state.data.length > 0 ? state.data.map((item, index) => __jsx(Link, {\n    key: index,\n    href: \"/moviedetail\",\n    as: `/p/${imdbID}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }, __jsx(Card, {\n    style: {\n      width: 300\n    },\n    cover: __jsx(\"img\", {\n      style: {\n        width: '100%'\n      },\n      alt: item.Title,\n      src: item.Poster !== 'N/A' ? item.Poster : 'https://cdn.cwsplatform.com/assets/no-photo-available.png',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 41\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }\n  }, __jsx(Meta, {\n    title: item.Title,\n    description: `The Movie ${item.Title} was release on ${item.Year}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 37\n    }\n  })))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, \"No data found\")));\n}","map":{"version":3,"sources":["/Users/mitulshah/Desktop/Next/pages/index.js"],"names":["React","useState","useReducer","Card","Input","Link","useEffect","getMovies","initialState","reducer","GET_MOVIE_REQUEST","GET_MOVIE","GET_MOVIE_FAILURE","Index","movie","setMovie","state","dispatch","Meta","Search","getMoviesData","type","response","json","payload","error","value","loading","data","length","map","item","index","imdbID","width","Title","Poster","Year"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport { Card, Input } from 'antd';\nimport Link from 'next/link';\nimport { useEffect } from 'react';\nimport { getMovies } from '../actions';\nimport { initialState, reducer } from '../reducer';\nimport { GET_MOVIE_REQUEST, GET_MOVIE, GET_MOVIE_FAILURE } from '../constant';\n\nexport default function Index() {\n    const [movie, setMovie] = useState('spiderman');\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const { Meta } = Card;\n    const { Search } = Input;\n\n    async function getMoviesData() {\n        dispatch({\n            type: GET_MOVIE_REQUEST,\n        });\n        try {\n            const response = await (await getMovies({ movie })).json();\n            dispatch({\n                type: GET_MOVIE,\n                payload: response,\n            });\n        } catch (error) {\n            dispatch({\n                type: GET_MOVIE_FAILURE,\n            });\n        }\n    }\n\n    useEffect(() => {\n        getMoviesData();\n    }, [movie]);\n    return (\n        <>\n            <Search\n                placeholder=\"input search text\"\n                onSearch={(value) => setMovie(value)}\n                enterButton\n            />\n            {state.loading ? (\n                <div>Loading</div>\n            ) : (\n                <>\n                    {state.data.length > 0 ? (\n                        state.data.map((item, index) => (\n                            <Link key={index} href=\"/moviedetail\" as={`/p/${imdbID}`}>\n                                <Card\n                                    style={{ width: 300 }}\n                                    cover={\n                                        <img\n                                            style={{ width: '100%' }}\n                                            alt={item.Title}\n                                            src={\n                                                item.Poster !== 'N/A'\n                                                    ? item.Poster\n                                                    : 'https://cdn.cwsplatform.com/assets/no-photo-available.png'\n                                            }\n                                        />\n                                    }\n                                >\n                                    <Meta\n                                        title={item.Title}\n                                        description={`The Movie ${item.Title} was release on ${item.Year}`}\n                                    />\n                                </Card>\n                            </Link>\n                        ))\n                    ) : (\n                        <div>No data found</div>\n                    )}\n                </>\n            )}\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}